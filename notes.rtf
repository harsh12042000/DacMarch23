{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9 -- assignment 1\par
\par
show databases;\par
create table semp(\par
empno char(4),\par
empname char(20),\par
basic float,\par
deptno char(2),\par
depthead char(4)\par
);\par
select * from semp;\par
\par
create table sdept(\par
deptno char(2),\par
deptname char(15)\par
);\par
\par
insert into sdept ( deptno, deptname) values\par
('10', 'developement'),\par
('20', 'training');\par
\par
select * from sdept;\par
\par
insert into  semp(empno, empname, basic, deptno, depthead) values\par
('0001', 'sunil', '6000', '10', null),\par
('0002', 'hiren', '8000', '20',null),\par
('0003', 'ali', '4000', '10', '0001'),\par
('0004', 'george', '6000', null, '0002');\par
\par
select * from semp;\par
\par
create table s(\par
`s#` char(2),\par
sname char(20),\par
Status INT,\par
city char(20)\par
);\par
\par
select * from s;\par
\par
insert into s(`s#`) \par
values\par
('s1'),\par
('s2'),\par
('s3');\par
\par
insert into s(`s#`, sname, status, city)\par
\par
\par
alter table s\par
change column name Sname char(20);\par
\par
\par
\par
create table p(\par
`p#` char(2),\par
pname char(20),\par
color char(10),\par
weight float,\par
city char(20)\par
);\par
\par
insert into p(`p#`,pname);\par
\par
create table j(\par
`j#` char(2),\par
jname char(20),\par
city char(20)\par
);\par
\par
create table spj (\par
`s#` char(2),\par
`p#` char(2),\par
`j#` char(2),\par
qty int\par
);\par
\par
select * from s;\par
\par
delete from s where `s#` = 's1';\par
\par
select pname, color\par
from p\par
where city = 'london';\par
\par
insert into s (`S#`, Sname, status, city) values\par
('S1', 'Smith', 20, 'London'),\par
('S2', 'Jones', 10, 'Paris'),\par
('S3', 'Blake', 30, 'Paris'),\par
('S4', 'Clark', 20, 'London'),\par
('S5', 'Adams', 30, 'Athens');\par
\par
insert into p (`P#`, Pname, Color, Weight, City) values\par
('P1', 'Nut', 'Red', 12, 'London'),\par
('P2', 'Bolt', 'Green', 17, 'Paris'),\par
('P3', 'Screw', 'Blue', 17, 'Rome'),\par
('P4', 'Screw', 'Red', 14, 'London'),\par
('P5', 'Cam', 'Blue', 12, 'Paris'),\par
('P6', 'Cog', 'Red', 19, 'London');\par
\par
insert into j (`J#`, Jname, City) values\par
('J1', 'Sorter', 'Paris'),\par
('J2', 'Punch', 'Rome'),\par
('J3', 'Reader', 'Athens'),\par
('J4', 'Console', 'Athens'),\par
('J5', 'Collator', 'London'),\par
('J6', 'Terminal', 'Oslo'),\par
('J7', 'Tape', 'London');\par
\par
insert into spj (`s#`, `p#`, `J#`, qty) values\par
('S1', 'P1', 'J1', 200),\par
('S1', 'P1', 'J4', 700),\par
('S2', 'P3', 'J1', 400),\par
('S2', 'P3', 'J2', 200),\par
('S2', 'P3', 'J3', 200),\par
('S2', 'P3', 'J4', 500),\par
('S2', 'P3', 'J5', 600),\par
('S2', 'P3', 'J6', 400),\par
('S2', 'P3', 'J7', 800),\par
('S2', 'P5', 'J2', 100),\par
('S3', 'P3', 'J1', 200),\par
('S3', 'P4', 'J2', 500),\par
('S4', 'P6', 'J3', 300),\par
('S4', 'P6', 'J7', 300),\par
('S5', 'P2', 'J2', 200),\par
('S5', 'P2', 'J4', 100),\par
('S5', 'P5', 'J5', 500),\par
('S5', 'P5', 'J7', 100),\par
('S5', 'P6', 'J2', 200),\par
('S5', 'P1', 'J4', 100),\par
('S5', 'P3', 'J4', 200),\par
('S5', 'P4', 'J4', 800),\par
('S5', 'P5', 'J4', 400),\par
('S5', 'P6', 'J4', 500);\par
\par
\par
select * from s;\par
\par
select `s#`, sname from s;\par
\par
select * from s where city = 'paris';\par
\par
select * from s where city = 'london' or city = 'athens';\par
\par
select * from p where city = 'london';\par
\par
select pname from p where weight between 12 and 14;\par
\par
select * from s where status >= 20;\par
\par
select * from s where city <>'london';\par
\par
select weight, weight * 1000, weight/1000 from p;\par
\par
\par
-- assignment2\par
-- 1\par
select * from s order by city desc;\par
-- 2\par
select * from p order by pname asc, city asc;\par
-- 3\par
select * from s where status between 10 and 20;\par
-- 4\par
select Pname, weight from p where weight not between 10 and 15;\par
-- 5\par
select pname from p where pname like 's%';\par
-- 6\par
select * from s where left(city,1) = 'L';\par
-- 7\par
select * from j where substring(jname, 3, 1) = 'n';\par
\par
-- assignment 3\par
select concat(concat(upper(sname)),' A') from s;\par
-- oracle select initcap(sname) from s;\par
-- 1\par
select concat(upper(left(sname, 1)), lower(substring(sname,2)))\par
as 'sname' from s;\par
-- 2\par
select upper(sname) from s;\par
-- 3 \par
select lower(sname) from s;\par
-- 4\par
select lpad (sname,25, ' ') from s;\par
-- 5\par
select replace(sname, 'la','ro') from s;\par
-- 6\par
select replace(replace(sname, 'l' , 'r'), 'a','o') from s;\par
-- 7\par
select sname,length(sname) from s;\par
-- 8\par
select * from s where soundex(sname) = soundex('BLOKE');\par
-- 9\par
select sname,\par
case\par
when status = 10 then 'ten'\par
when status = 20 then 'twenty'\par
else 'thirty'\par
end "status"\par
from s;\par
\par
-- 10\par
select now() from dual;\par
select dayname(now()) from dual;\par
select dayname(curdate());\par
\par
-- Assignment 4\par
-- 1. Display the minimum Status in the Supplier table. \par
select min(status) from s;\par
-- 2. Display the maximum Weight in the Parts table. \par
select max(weight) from p;\par
-- 3. Display the average Weight of the Parts\par
select avg(weight) from p;\par
-- 4. Display the total Quantity sold for part \lquote P1\rquote\par
select sum(qty) from spj\par
where `p#` = 'p1';\par
-- 5. Display the total Quantity sold for each part.\par
select `p#`, sum(qty) from spj\par
\tab group by `p#`\par
    order by 1;\par
-- 6. Display the average Quantity sold for each part.\par
select `p#`, avg(qty) from spj\par
\tab group by `p#`;\par
-- 7. Display the maximum Quantity sold for each part, provided the maximum Quantity \par
-- is greater than 800. \par
select max(qty) from spj\par
group by `s#`, `p#`, `j#`\par
having max(qty)>300;\tab -- check for 800\par
-- 8. Display the Status and the count of Suppliers with that Status.\par
select status, count(status) from s\par
group by status\par
order by 1;\par
-- 9. Display the count of Projects going on in different cities. \par
select city, count(city) from p\par
group by city;\par
-- 11. Display the Status and the Count of Suppliers with that Status in the following format \par
-- as shown below:- \par
select \par
case\par
when status = 10 then 'ten'\par
when status = 20 then 'twenty'\par
when status = 30 then 'thirty'\par
end status, count(*) count\par
from s\par
group by status;\par
\par
\par
-- Assignment 5\par
-- 1 . Display the Supplier name and the Quantity sold\par
select sname, sum(qty) "quantity", s.`s#`\par
from spj, s\par
where spj.`s#`= s.`s#`\par
group by sname, s.`s#`;  -- fast\par
\par
--  2. Display the Part name and Quantity sold\par
select pname, qty from p, spj; -- slow\par
\par
-- 3. Display the Project name and Quantity sold\par
select jname, qty from j, spj; -- slow\par
\par
-- 4. Display the Supplier name, Part name, Project name and Quantity sold\par
select sname, pname, jname, qty from s, p, j, spj;\par
\par
-- 5. Display the Supplier name, Supplying Parts to a Project in the same City. \par
select * from spj;\par
select s.sname, p.pname, j.city  from s, p, j, spj\par
where spj.`s#` = s.`s#` and spj.`p#` = p.`p#`and spj.`j#` = j.`j#` and j.city = s.city;  \par
\par
-- 6. Display the Part name that is \lquote Red\rquote  is color, and the Quantity sold. \par
select * from p;\par
\par
select pname, color, qty from p, spj\par
where color = 'red';\par
\par
select p.pname,spj.qty, color from spj,p where p.color = 'Red' and spj.`p#` = p.`p#`;\par
\par
select p.pname,sum(spj.qty), color\par
from spj,p \par
where p.color = 'Red' and spj.`p#` = p.`p#` \par
group by p.pname;\par
\par
-- 7. Display all the Quantity sold by Suppliers with the Status = 20.\par
select * from s; -- check\par
select s.sname, spj.`s#`, status, spj.qty\par
from s, spj\par
where s.Status = 20 and spj.`s#` = s.`s#`;\par
\par
-- 8. Display all the Parts and Quantity with a Weight > 14.\par
select distinct pname, p.`p#`, weight,  qty \par
from p, spj\par
where p.weight > 14 and p.`p#` = spj.`p#`;\par
\par
--  9. Display all the Project names and City, which has bought more than 500 Parts\par
select * from p;\par
select distinct pname, p.city, qty, p.`p#`\par
from p, spj\par
where qty>500 and p.`p#` = spj.`p#` ;\par
\par
-- 10. Display all the Part names and Quantity sold that have a Weight less than 15. \par
select pname, sum(qty), p.`p#`, weight\par
from p, spj\par
where weight < 15 and p.`p#` = spj.`p#`;\par
\par
select user() , database();\par
\par
create database mydDB;\par
drop database myddb;\par
create database myDB;\par
use myDB;\par
use nashik;\par
use myDB;\par
\par
alter database myDB read only = 1;\par
drop database myDB;\par
alter database myDB read only = 0;\par
\par
alter database myDb encryption = 'N';\par
create table emp(\par
empid int,\par
first_name varchar(50),\par
last_name varchar(50),\par
hourly_pay decimal(5,2),\par
hire_date date);\par
\par
select * from  emp;\par
\par
rename table emp to workers;\par
rename table workers to emp;\par
\par
alter table emp \par
add phone_number varchar(15);\par
\par
alter table emp\par
rename column phone_number to email;\par
\par
alter table emp\par
modify column email varchar(100);\par
\par
alter table emp\par
modify email varchar(100)\par
after last_name;\par
\par
alter table emp \par
modify email varchar(100)\par
first;\par
\par
select * from emp;\par
\par
alter table emp \par
modify email varchar(100)\par
after last_name;\par
\par
alter table emp\par
drop column email;\par
\par
select * from emp;\par
\par
insert into emp\par
values (1, "Eugene", "Krabs", 25.50, "2023-01-02");\par
\par
insert into emp\par
values\par
(2, "Squidward", "Tentacles", 15.00, "2023-01-03"),\par
(3, "Spongebog", "Squarepants", 12.50, "2023-01-04"),\par
(4, "Patrick", "Star", 12.50, "2023-01-05"),\par
(5, "Sandy", "Cheeks", 17.25, "2023-01-06");\par
\par
select * from emp;\par
\par
insert into emp(empid, first_name, last_name)\par
values (6, "Sheldon", "Plankton");\par
\par
select * from emp;\par
\par
select * from emp;\par
\par
select first_name, last_name\par
from emp;\par
\par
select * from emp\par
where empid = 3;\par
\par
select * from emp\par
where first_name = "Spongebog";\par
\par
select * from emp\par
where hourly_pay > 15;\par
\par
select * from emp\par
where hire_date <= "2023-01-03";\par
\par
select * from emp where empid != 1;\par
\par
select * from emp where hire_date is not null;\par
\par
select * from emp;\par
\par
update emp\par
set hourly_pay = 10.25\par
where empid = 6;\par
\par
set sql_safe_updates = 0;\par
\par
update emp\par
set hourly_pay = 10.50, \par
\tab hire_date = "2023-01-07"\par
where empid = 6;\par
\par
select * from emp;\par
\par
update emp\par
set hire_date = null\par
where empid = 6;\par
\par
delete from emp\par
where empid = 6;\par
\par
select * from emp;\par
\par
commit;\par
\par
select * from emp;\par
\par
delete from emp;\par
\par
rollback;\par
\par
select * from emp;\par
\par
create table test(\par
my_date date,\par
my_time ti,\par
my_datetime datetime);\par
\par
select * from test;\par
\par
insert into test\par
values(current_date(), current_time(), now());\par
\par
insert into test\par
values(current_date() +1, null, now());\par
\par
select * from test;\par
\par
insert into test\par
values(null, current_time(), null);\par
\par
select * from test;\par
\par
drop table test;\par
\par
create table products(\par
productId int,\par
productName varchar(25) unique,\par
price decimal(4,2)\par
);\par
\par
select * from products;\par
\par
alter table products\par
add constraint\par
unique(productName);\par
\par
insert into products\par
values\par
(100, "burger", 3.99),\par
(101, "fries", 1.89),\par
(102, "soda", 1.00),\par
(103, "ice cream", 1.49);\par
\par
drop table products;\par
\par
select * from products;\par
\par
insert into products\par
values(104, "fries", 1.05);\par
\par
select * from products;\par
\par
create table products(\par
productId int,\par
productName varchar(25),\par
price decimal(4,2) not null\par
);\par
\par
alter table products\par
modify price decimal(4.2) not null;\par
\par
select * from products;\par
\par
insert into products\par
values(104, "cookie", 0);\par
\par
update products\par
set price = 2\par
where productId = 104;\par
\par
create table emp(\par
empid int,\par
first_name varchar(50),\par
last_name varchar(50),\par
hourly_pay decimal(5,2),\par
hire_date date,\par
constraint chk_hourly_pay check(hourly_pay >= 10.00)\par
);\par
\par
alter table emp\par
add constraint chk_hourly_pay check(hourly_pay >= 10.00);\par
\par
select * from emp;\par
\par
insert into emp\par
values (6, "she", "plankton", 10.00, "2023-01-07");\par
\par
alter table emp\par
drop check chk_hourly_pay;\par
\par
update emp\par
set hourly_pay = 5.00\par
where empid = 7;\par
\par
select * from emp;\par
\par
-- default\par
\par
select * from products;\par
\par
insert into products\par
values\par
(104, "straws", 0.00),\par
(105, "napkin", 0.00),\par
(106, "fork", 0.00),\par
(107, "spoon", 0.00);\par
\par
delete from products\par
where productId >= 104;\par
\par
select * from products;\par
\par
create table products(\par
product_id int,\par
product_name VARCHAR(25),\par
price DECIMAL (4,2) DEFAULT 0\par
);\par
\par
alter table products\par
alter price set default 0;\par
\par
insert into products(productId, productName)\par
values \par
(104, "straw"),\par
(105, "napkin"),\par
(105, "fork"),\par
(107, "spoon");\par
\par
select * from products;\par
\par
create table transactions(\par
transaction_id int,\par
amount decimal(5,2),\par
transaction_date datetime default now()\par
);\par
\par
insert into transactions(transaction_id, amount)\par
values\par
(1, 4.99);\par
\par
insert into transactions(transaction_id, amount)\par
values\par
(2, 9.99);\par
\par
select * from transactions;\par
\par
-- primary key\par
\par
create table transacts(\par
transId int primary key,\par
amount decimal(5,2)\par
);\par
\par
alter table transacts\par
add constraint\par
primary key(amount);\par
\par
insert into transacts\par
values (null, 2.43);\par
\par
select * from transacts;\par
\par
select  transid, amount from transacts where transid = 1003;\par
\par
drop table transacts;\par
\par
create table transacts(\par
transId int primary key auto_increment,\par
amount decimal (5,2)\par
);\par
\par
insert into transacts(amount)\par
values\par
(3.38);\par
select * from transacts;\par
\par
delete from transacts;\par
\par
alter table transacts\par
auto_increment = 1000;\par
\par
insert into transacts(amount)\par
values(5.99);\par
\par
select * from transacts;\par
\par
create table customers(\par
custId int primary key auto_increment,\par
first_name varchar(50),\par
last_name varchar(50)\par
);\par
\par
insert into customers (first_name, last_name)\par
values\par
("fred", "fish"),\par
("Larry", "lobster"),\par
("Bubble", "Bass");\par
\par
select * from customers;\par
\par
drop table transacts;\par
\par
create table transacts(\par
transID int primary key auto_increment,\par
amount decimal(5,2),\par
custId int,\par
foreign key(custId) references customers(custId)\par
);\par
\par
\par
\par
select * from transacts;\par
\par
alter table transacts\par
drop foreign key transacts_ibfk_1;\par
\par
alter table transacts\par
add constraint fk_customer_id\par
foreign key(custId) references customers(custId);\par
\par
delete from transacts;\par
select * from transacts;\par
\par
alter table transacts\par
auto_increment = 1000;\par
\par
insert into transacts(amount, custId)\par
values\par
(4.99, 3),\par
(2.89, 2),\par
(3.38, 3),\par
(4.99, 1);\par
\par
select * from transacts;\par
\par
delete from customers \par
where custId =3;\par
\par
insert into transacts (amount, custId)\par
values(1.00, null);\par
select * from transacts;\par
\par
insert into customers(first_name, last_name)\par
values("poppy", "puff");\par
select * from customers;\par
\par
select * \par
from transacts inner join customers\par
on transacts.custID = customers.custID;\par
\par
select transid, amount, first_name, last_name \par
from transacts inner join customers\par
on transacts.custID = customers.custID;\par
\par
select * \par
from transacts left join customers\par
on transacts.custID = customers.custID;\par
\par
select * \par
from transacts right join customers\par
on transacts.custID = customers.custID;\par
\par
select * \par
from transacts left join customers\par
on transacts.custID = customers.custID\par
union\par
select * \par
from transacts right join customers\par
on transacts.custID = customers.custID;\par
\par
select count(amount) as "todays transactions"\par
from transacts;\par
\par
select max(amount) as maximum\par
from transacts;\par
\par
select min(amount) as minimum\par
from transacts;\par
\par
select sum(amount) as sum\par
from transacts;\par
\par
select * from emp;\par
\par
select concat(first_name ," ", last_name) as full_name\par
from emp;\par
\par
alter table emp\par
add column job varchar(25) after hourly_pay;\par
select * from emp;\par
\par
update emp\par
set job = " sweeper"\par
where empid = 6;\par
select * from  emp;\par
\par
select *\par
from emp\par
where job = "cook" or job = "clerk";\par
\par
\par
select * from emp\par
where not job = "manager" and not job = "clerk";\par
\par
select * from emp\par
where hire_date between "2023-01-04" and "2023-01-07";\par
\par
select * from emp\par
where job in ("cook", "sweeper");\par
\par
select * from emp\par
order by empid asc;\par
\par
show tables;\par
\par
show databases;\par
\par
use mydb;\par
\par
show tables;\par
\par
select  * from emp\par
order by hire_date desc;\par
\par
select * from transacts\par
order by amount asc, custID desc;\par
\par
select * from customers\par
\par
order by last_name desc limit 4;\par
\par
select * from customers\par
limit 3, 1;\par
\par
select * from customers;\par
\par
alter table customers\par
add referral_id int;\par
\par
update customers\par
set referral_id = 3\par
where custId = 4;\par
\par
select * \par
from customers as a\par
inner join customers as b \par
on a.referral_id = b.custId;\par
\par
select a.custId, a.first_name, a.last_name,\par
\tab\tab concat(b.first_name," ", b.last_name) as "referred by"\par
from customers as a\par
left join customers as b \par
on a.referral_id = b.custId;\par
\par
select * from customers;\par
\par
select * from emp;\par
\par
alter table emp\par
add supervisorID int;\par
\par
set sql_safe_updates = 0;\par
\par
update emp\par
set supervisorId = 1\par
where empid = 5;\par
\par
select a.first_name, a.last_name,\par
\tab\tab concat(b.first_name, " ", b.last_name) as "reports to"\par
from emp as a\par
left join emp as b\par
on a.supervisorId = b.empid;\par
\par
select * from emp;\par
\par
create view empAttendance as\par
select  first_name, last_name\par
from emp;\par
\par
select * from empattendance\par
order by last_name asc;\par
\par
alter table customers\par
add column email varchar(100);\par
\par
update customers\par
set email = " ppffu@gmail.com"\par
where custId = 3;\par
\par
select customerEmails.email, custid  from customers, customerEmails\par
where customers.custid != customerEmails.email;\par
\par
create view customerEmails as select email from customers;\par
select * from customers;\par
select * from customerEmails;\par
\par
insert into customers\par
values(5, "pearl", "krabs", null, "pkrabs@gmail.com");\par
select* from customers;\par
\par
show databases;\par
\par
use mydb;\par
\par
create view v3 as select empid, job from emp;\par
\par
grant insert on v3 to anup;\par
select user();\par
\par
select * from emp;\par
\par
use nashik;\par
create view v2 as select sname from s;\par
\par
use mydb;\par
\par
select distinct first_name, last_name\par
from transacts\par
inner join customers\par
on transacts.custId = customers.custId;\par
\par
delimiter //\par
create procedure get_customers()\par
begin\par
\tab select * from customers;\par
end //\par
delimiter ;\par
\par
drop procedure get_customers;\par
commit;\par
\par
delimiter //\par
create procedure find_cust(id int)\par
begin\par
\tab\tab select * from customers\par
        where custId = id;\par
end; //\par
delimiter ;\par
\par
drop procedure find_cust;\par
\par
call find_cust(1);\par
\par
commit;\par
\par
delimiter //\par
create procedure find(in f_name varchar(50), in l_name varchar(50))\par
begin\par
\tab select *\par
\tab from customers\par
\tab where first_name = f_name and last_name = l_name;\par
end //\par
delimiter ;\par
\par
\par
call find("larry", "lobster");\par
\par
create table tempp(\par
fir int,\par
 sec char(15)\par
);\par
\par
delimiter //\par
create procedure abc()\par
begin\par
\tab insert into tempp values (1, 'inside abc');\par
end; //\par
delimiter ;\par
\par
drop procedure abc;\par
\par
call abc();\par
\par
select * from tempp;\par
\par
delimiter //\par
 create procedure abc()\par
 begin\par
 declare x int;\par
 set x = 10;\par
 insert into tempp values (x, "inside abc");\par
 end; //\par
 delimiter ;\par
 \par
delete from tempp\par
where fir = 1;\par
\par
set sql_safe_updates = 0;\par
\par
drop procedure abc;\par
\par
delimiter // \par
create procedure abc()\par
begin\par
\tab declare x char(15) default 'CDAC';\par
    insert into tempp values (1,x);\par
end; //\par
delimiter ;\par
\par
call abc();\par
\par
select * from tempp;\par
\par
-- program 3\par
delimiter //\par
create procedure def()\par
begin\par
\tab declare x char(15) default 'KING';\par
    declare y float default 3000;\par
    declare z float default 0.4;\par
    declare hra float;\par
    set hra = y*z;\par
    insert into tempp values (y,x);\par
    insert into tempp values(hra, 'HRA');\par
end; //\par
delimiter ;\par
\par
call def();\par
\par
select * from tempp;\par
\par
delimiter //\par
 create procedure ghi (x char(15), y float, z float)\par
 begin\par
\tab declare hra float;\par
    set hra = y*z;\par
    insert into tempp values(y,x);\par
    insert into tempp values (hra, "HRA");\par
 end; //\par
 delimiter ;\par
 \par
 call ghi("king", 3000, 0.4);\par
 call ghi("scott", 2500, 0.3);\par
 \par
 select * from tempp;\par
 \par
 create table emp2(\par
 ename varchar(20),\par
 sal int,\par
 job varchar(30)\par
 );\par
 \par
 delimiter //\par
 create procedure klm()\par
 begin\par
\tab declare x int;\par
    declare y char(15);\par
    select sal,job into x,y from emp2\par
    where ename = "KING";\par
    /* processing , e.g. set hra = x* 0.4 */\par
    insert into tempp value(x, y);\par
 end; //\par
 delimiter ;\par
 \par
 drop procedure klm;\par
 \par
 call klm(1000, "saudi");\par
 \par
 select * from tempp;\par
 \par
 use mydb;\par
 \par
 delimiter //\par
 create procedure abc()\par
 begin\par
\tab declare x int;\par
    select sal into x from emp\par
    where ename  = "king";\par
\tab if x > 4000 then\par
\tab\tab insert into tempp values(x, 'high sal');\par
        end if;\par
 end; //\par
 delimiter ;\par
 \par
 select * from tempp;;\par
 \par
 delimiter //\par
 create procedure abc()\par
 begin\par
\tab declare x int;\par
    select sal into x from emp2\par
    where ename = "Scott";\par
    if x > 4000 then\par
\tab\tab insert into tempp values(x, 'High sal');\par
        else\par
        insert into tempp values(x, 'Low sal');\par
\tab end if;\par
 end; //\par
 delimiter ;\par
 \par
 call abc();\par
 select current_user();\par
 \par
 drop procedure abc;\par
   select * from tempp;\par
  select * from emp2;\par
  \par
  insert into emp2\par
  values\par
  ('KING', 5000, 'Manager'),\par
  ('SCOTT', 3000, 'Clerk');\par
  \par
 delimiter //\par
 create procedure abc2(y char (15))\par
 begin\par
 declare x int;\par
 select sal into x from emp2\par
 where ename = y;\par
 insert into tempp values(x, y);\par
 end; //\par
 delimiter ;\par
  \par
   drop procedure abc2;\par
  \par
  call abc2('KING');\par
  \par
  select * from tempp;\par
  \par
set sql_safe_updates = 0;\par
delete from emp2\par
where ename = 'Scott';\par
\par
\par
delimiter //\par
create procedure abc3()\par
begin\par
declare x int;\par
select sal into x from emp2\par
where ename = 'KING';\par
if x > 4000 then\par
\tab insert into tempp values(x, "high sal");\par
end if;\par
end; //\par
delimiter ;\par
\par
drop procedure abc3;\par
\par
call abc3();\par
\par
select * from tempp;\par
\par
delimiter //\par
create procedure abc5()\par
begin\par
declare x int;\par
\tab select sal into x from emp\par
\tab where ename = 'KING';\par
\tab if x > 4000 then\par
    insert into tempp  values (x, 'high Sal');\par
    else\par
    insert into tempp values (x, 'low Sal');\par
    end if;\par
end; //\par
delimiter ;\par
\par
select * from tempp;\par
\par
delimiter //\par
create procedure abc6()\par
begin\par
declare x int;\par
select sal into x from emp2\par
where ename = 'SCOTT';\par
\tab if x> 4000 then\par
\tab\tab insert into tempp values(x, 'HIGH val');\par
\tab elseif x < 4000 then\par
\tab\tab\tab insert into tempp values(x, 'LOW val');\par
\tab else\par
\tab\tab\tab insert into tempp values(x, 'MEDIUM val');\par
\tab\tab end if;\par
end; //\par
delimiter ;\par
\par
drop procedure abc6;\par
\par
call abc6();\par
\par
select * from tempp;\par
\par
delimiter //\par
create procedure abc7()\par
begin\par
declare x boolean default true;\par
if x then\par
insert into tempp values(1, 'Mumbai');\par
end if;\par
end; //\par
delimiter ;\par
\par
delimiter //\par
create procedure abc8()\par
begin\par
declare x boolean default false;\par
if not x then\par
insert into tempp values(1, 'Delhi');\par
end if;\par
end; //\par
delimiter ;\par
\par
call abc8();\par
\par
select * from tempp;\par
\par
delimiter //\par
create procedure abc9()\par
\tab begin\par
\tab declare x int default 1;\par
\tab\tab while x < 10 do\par
\tab\tab insert into tempp values(x , 'in while loop');\par
\tab\tab set x = x +1;\par
\tab\tab end while;\par
\tab end; //\par
delimiter ;\par
\par
call abc9();\par
\par
select * from tempp;\par
\par
delimiter //\par
create procedure abc10()\par
begin\par
\tab declare x int default 1;\par
\tab declare y int default 1;\par
\tab while x < 10 do\par
\tab\tab while y < 10 do\par
\tab\tab insert into tempp values (y, 'in y loop');\par
\tab\tab set y = y+1;\par
\tab end while;\par
\tab insert into tempp values(x, 'in x loop');\par
\tab\tab set x = x+1;\par
\tab end while;\par
end; //\par
delimiter ;\par
\par
call abc10();\par
\par
select * from tempp;\par
\par
use mydb;\par
\par
delimiter //\par
create procedure abc11()\par
\tab begin\par
\tab declare x int default 1;\par
\tab while x < 10 do\par
\tab insert into tempp values(x, 'loop madhe');\par
    set x = x+1;\par
    end while;\par
\tab end; //\par
delimiter ;\par
\par
drop procedure abc11;\par
call abc11;\par
\par
select * from tempp;\par
\par
delimiter //\par
create procedure abc12()\par
\tab begin\par
\tab declare x int default 1;\par
\tab declare y int default 1;\par
\tab while x < 10 do\par
\tab\tab while y < 10 do\par
\tab\tab insert into tempp values(y, 'int Y LOOP');\par
        set y = y+1;\par
\tab end while;\par
    insert into tempp values (x, 'in X LOOP');\par
    set x = x + 1;\par
\tab end while;\par
\tab end; //\par
delimiter ;\par
\par
call abc12;\par
\par
select * from tempp;\par
\par
delimiter //\par
create procedure abc13()\par
\tab begin\par
    declare x int default 1;\par
    declare y int default 1;\par
    while x < 10 do\par
    while y < x do\par
\tab\tab insert into tempp values(y, 'in y loop');\par
        set y = y+1;\par
\tab end while;\par
\tab\tab insert into tempp values(x, 'in x loop');\par
        set x = x+1;\par
        end while;\par
\tab end; //\par
delimiter ;\par
\par
call abc13;\par
\par
drop procedure abc13;\par
\par
drop table tempp;\par
\par
create table tempp(\par
fir int,\par
sec varchar(50));\par
\par
\par
select * from tempp;\par
\par
delimiter //\par
create procedure abc14()\par
\tab begin\par
\tab declare x int default 1;\par
\tab repeat\par
\tab\tab\tab insert into tempp values(x,'inn loop');\par
\tab\tab\tab set x = x+1;\par
\tab until x>5\par
\tab end repeat;\par
\tab end; //\par
delimiter ;\par
\par
call abc14;\par
\par
select * from tempp;\par
\par
delimiter //\par
create procedure abc15()\par
\tab begin\par
\tab declare x int default 1;\par
    pqr_loop:loop\par
    if x>10 then\par
\tab\tab leave pqr_loop;\par
\tab end if;\par
    set x=x+1;\par
    if mod(x,2) != 0 then\par
\tab\tab iterate pqr_loop;\par
\tab else\par
\tab\tab insert into tempp values(x, 'inside loop');\par
\tab end if;\par
    end loop;\par
\tab end; //\par
delimiter ;\par
\par
call abc15;\par
\par
select * from tempp;\par
\par
create table emp3 (\par
empno int,\par
ename varchar(20),\par
sal int,\par
deptno varchar(20)\par
);\par
\par
insert into emp3\par
values\par
(1, 'A', 5000, '1'),\par
(2, 'B', 6000, '1'),\par
(3, 'C', 7000, '1'),\par
(4, 'D', 9000, '2'),\par
(5, 'E', 8000, '2');\par
\par
\par
delimiter //\par
create procedure abc16()\par
\tab begin\par
\tab declare a int;\par
\tab declare b varchar(20);\par
\tab declare c int;\par
\tab declare d varchar(20);\par
    declare x int default 1;\par
\tab declare c1 cursor for select * from emp3;\par
\tab\tab open c1;\par
        while x < 6 do\par
        fetch c1 into a,b,c,d;\par
        insert into tempp values(a,b);\par
        set x = x+1;\par
        end while;\par
\tab\tab close c1;\par
\tab end; //\par
delimiter ;\par
\par
drop procedure abc16;\par
\par
call abc16;\par
\par
select * from tempp;\par
\par
alter table emp2\par
add ranking int;\par
\par
update emp2\par
set ranking = 2\par
where ename = 'SCOTT';\par
\par
delete from emp2\par
where ranking = 2;\par
call abc16;\par
\par
\par
delimiter //\par
create procedure abc17()\par
\tab begin\par
\tab declare a int;\par
\tab declare b varchar(20);\par
\tab declare c int;\par
\tab declare d varchar(20);\par
    declare x int default 0;\par
    declare y int;\par
\tab declare c1 cursor for select * from emp3;\par
    select count(*) into y from emp3;\par
\tab\tab open c1;\par
        while x < y do\par
        fetch c1 into a,b,c,d;\par
        insert into tempp values(a,b);\par
        set x = x+1;\par
        end while;\par
\tab\tab close c1;\par
\tab end; //\par
delimiter ;\par
\par
drop procedure abc17;\par
call abc17;\par
\par
select * from tempp;\par
select * from emp3;\par
\par
\par
delimiter //\par
create procedure abc19()\par
\tab begin\par
\tab declare a int;\par
\tab declare b varchar(20);\par
\tab declare c int;\par
\tab declare d varchar(20);\par
\tab declare finished int default 0;\par
    declare c1 cursor for select * from emp3;\par
    declare continue handler for not found set finished = 1;\par
\tab\tab open c1;\par
        cursor_c1_loop : loop\par
        fetch c1 into a,b,c,d;\par
        if finished = 1 then\par
\tab\tab\tab leave cursor_c1_loop;\par
\tab\tab end if;\par
        insert into tempp values(a,b);\par
        end loop cursor_c1_loop;\par
\tab\tab close c1;\par
\tab end; //\par
delimiter ;\par
\par
drop procedure abc19;\par
\par
call abc19();\par
\par
select * from  tempp;\par
\par
create table result(\par
length int,\par
breadth int,\par
area decimal(4,2),\par
perimeter decimal(4,2)\par
);\par
\par
drop table result;\par
\par
delimiter //\par
create procedure rect(length int, breadth int)\par
\tab begin\par
    declare area decimal (4,2);\par
    declare perimeter decimal (4,2);\par
    set area = length * breadth;\par
    set perimeter = 2* (length + breadth);\par
    insert into result values(length, breadth, area, perimeter);\par
\tab end; //\par
delimiter ;\par
\par
drop procedure rect;\par
\par
call rect(5,10);\par
\par
select * from result;\par
\par
create table tempresult(\par
x int,\par
square int,\par
cubee int\par
);\par
\par
delimiter //\par
create procedure value(x int)\par
begin\par
declare cubee int;\par
declare square int;\par
set square = x*x;\par
set cubee = square * x;\par
insert into tempresult values(x, cubee, square);\par
end; //\par
delimiter ;\par
\par
call value(10);\par
\par
select * from tempresult;\par
\par
create table temperature(\par
cel decimal(50,2),\par
far decimal(50,2)\par
);\par
drop table temperature;\par
\par
delimiter //\par
create procedure converter(x decimal(3,2),val decimal(50,2))\par
begin\par
declare cel decimal(50,2);\par
declare far decimal(50,2);\par
if x = 1 then\par
\tab set cel = (val-32)*5/9;\par
    insert into temperature values(cel,val);\par
elseif x = 2 then\par
\tab set far = 9/5*val + 32;\par
    insert into temperature values(val, far);\par
else\par
\tab select 'invalid value for x';\par
end if;\par
end; //\par
delimiter ;\par
drop procedure converter;\par
call converter(2, 35);\par
\par
select * from temperature;\par
\par
create table temperature(\par
cel float,\par
far float\par
);\par
\par
delimiter //\par
create procedure converter(x float,val float)\par
begin\par
declare cel float;\par
declare far float;\par
if x = 1 then\par
\tab set cel = (val-32)*5/9;\par
    insert into temperature values(cel,val);\par
elseif x = 2 then\par
\tab set far = 9/5*val + 32;\par
    insert into temperature values(val, far);\par
else\par
\tab select 'invalid value for x';\par
end if;\par
end; //\par
delimiter ;\par
\par
call converter(3, 35);\par
\par
select * from temperature;\par
\par
create table lengthresult(\par
inch float,\par
yards float,\par
feet float\par
);\par
\par
delimiter //\par
create procedure length(inch float)\par
begin\par
declare yards float;\par
declare feet float;\par
set yards = 3/124 * inch;\par
set feet = 1/12 * inch;\par
insert into lengthresult values(inch, yards, feet);\par
end; //\par
delimiter ;\par
\par
drop procedure length;\par
\par
call length(5);\par
\par
select * from lengthresult;\par
\par
delimiter //\par
create procedure integ(x int)\par
begin\par
if mod(x,5) != 0 then\par
select 'not divisible by 5';\par
else \par
select 'divisible by 5';\par
end if;\par
end; //\par
delimiter ;\par
\par
drop procedure integ;\par
\par
call integ(33);\par
\par
delimiter //\par
create procedure realproduct(x int, y int) \par
\tab begin\par
    if x* y > 100 then\par
    select 'product greater than 100';\par
    else\par
\tab select 'product less than 100';\par
    end if;\par
\tab end; //\par
delimiter ;\par
\par
call realproduct(5,8) ;\par
\par
delimiter //\par
create function nrange(x int) \par
returns int\par
deterministic\par
begin\par
declare numrange int;\par
if x between 1 and 10 then\par
set numrange = 1;\par
else\par
set numrange = 2;\par
end if;\par
\par
return numrange;\par
end; //\par
delimiter ;\par
\par
create table number(\par
num int\par
);\par
\par
drop function nrange;\par
\par
delimiter //\par
create procedure rangee(x int)\par
begin\par
select  num, nrange(num) from number;\par
end; //\par
delimiter ;\par
\par
call rangee(5);\par
\par
select * from emp;\par
\par
delimiter //\par
create procedure check_v(num int, range1 int, range2 int)\par
begin\par
\tab declare y int;\par
    select empid into y from emp where empid = num; \par
\tab if num >= range1 and num <= range2 then\par
\tab select 'within range';\par
\tab else\par
\tab select 'not within range';\par
\tab end if;\par
end; //\par
delimiter ;\par
\par
drop procedure check_v;\par
\par
call check_v(2,1,5);\par
\par
select * from emp;\par
\par
select * from emp\par
where job like "_a%";\par
\par
select * from emp;\par
where first_name >= 'A' and  first_name <='S';\par
\par
update emp\par
set hourly_pay = 12, job = "doctor"\par
where empid = 6;\par
\par
delete from emp\par
where empid = 7;\par
\par
select concat(first_name," ",last_name) from emp;\par
select concat (concat(last_name, ' '), last_name) from emp;\par
select concat(upper(first_name), " " , upper(last_name)) from emp;\par
\par
select lpad(last_name,25,'*') from emp;\par
\par
select rpad(first_name,25, '^') from emp;\par
\par
select ltrim(first_name) from emp;\par
\par
select substr(first_name, 2,3) from emp;\par
\par
select * from emp;\par
\par
select replace(first_name,'she', 'darling') from emp;\par
\par
select instr(first_name,);\par
\par
use amba;\par
select * from employees;\par
\par
select instr(ename,'un') from employees;\par
\par
select length(ename) from employees;\par
\par
select ascii('A') from dual;\par
\par
select char(65 using utf8) from dual;\par
\par
select * from employees where soundex(ename) = soundex("Aroon");\par
\par
select ceil(sal) from employees;\par
select * from employees;\par
\par
insert into employees\par
values(10,"anand", 71000.55, 2, "D", "3");\par
\par
select sign(-44) from dual;\par
\par
select mod(9,5) from dual;\par
\par
select sqrt(81) from dual;\par
\par
select power(10,1/3) from dual;\par
\par
select abs(-10) from dual;\par
\par
select sysdate();\par
\par
select now() as "Date" from dual;\par
\par
select adddate(sysdate(),1) as "Anup loves Niles Ghule" from dual;\par
\par
select * from employees;\par
\par
delimiter //\par
create function age(birthdate date)\par
returns float\par
deterministic\par
begin\par
return floor(datediff(sysdate(),birthdate)/365);\par
end; //\par
delimiter ;\par
drop function  age;\par
select age("1998-11-04") as "age of me" from dual;\par
\par
select * from employees where mgr is null;\par
\par
select sal+job from employees;\par
select * from employees;\par
select least(sal, 2000) from employees;\par
\par
select \par
case\par
when deptno = 10 then "training"\par
when deptno = 20 then "exports"\par
when deptno = 30 then "sales"\par
else 'others'\par
end "deptname"\par
from emp;\par
\par
\par
select sum(sal) from employees\par
where empno = 1;\par
\par
select avg(sal) from employees;\par
\par
select avg(ifnull(sal,0)) from employees;\par
\par
select min(sal) from employees\par
where sal > (select min(sal)  from employees);\par
\par
select max(sal) from employees\par
where sal < (select max(sal) from employees);\par
\par
select * from employees;\par
\par
select count(sal) from employees;\par
\par
select count(*) from employees;\par
\par
select sum(sal)/count(*) from employees;\par
\par
select avg(ifnull(sal,0)) from employees;\par
\par
select count(*) from employees where sal > 7000;\par
\par
select count(*), min(sal), max(sal), sum(sal), avg(sal) from employees;\par
\par
select count(ename), min(sal) from employees;\par
\par
select * from employees where sal>avg(sal);\par
\par
select deptno , sum(sal) from employees group by deptno;\par
\par
select sum(sal) from employees group by deptno;\par
\par
select  deptno, job,sum(sal) from employees group by deptno, job;\par
\par
select deptno, sum(sal) from employees group by deptno, job;\par
\par
select deptno, sum(sal) from employees group by deptno having sum(sal) > 17000;\par
\par
select deptno, sum(sal)\par
from employees\par
group by deptno\par
order by sum(sal);\par
use amba;\par
select * from employees;\par
\par
create index i_emp_empno on employees(empno);\par
\par
show indexes from employees;\par
\par
\par
SELECT USER() AS CurrentUser;\par
\par
\par
\par
CREATE TABLE salespeople(snum int, sname varchar(10), city varchar(10), comm decimal(3,2));\par
\par
CREATE TABLE customers(cnum int, cname varchar(10), city varchar(10), rating int, snum int);\par
\par
CREATE TABLE orders(onum int(4), amt decimal(7,2), odate date, cnum int(4), snum int(4));\par
\par
INSERT INTO salespeople VALUES(1001, 'Peel', 'London', 0.12);\par
INSERT INTO salespeople VALUES(1002, 'Serres', 'San Jose', 0.13);\par
INSERT INTO salespeople VALUES(1004, 'Motika', 'London', 0.11);\par
INSERT INTO salespeople VALUES(1007, 'Rifkin', 'Barcelona', 0.15);\par
INSERT INTO salespeople VALUES(1003, 'Axelrod', 'New York', 0.10);\par
\par
INSERT INTO customers VALUES(2001, 'Hoffman', 'London', 100, 1001);\par
INSERT INTO customers VALUES(2002, 'Giovanni', 'Rome', 200, 1003);\par
INSERT INTO customers VALUES(2003, 'Liu', 'San Jose', 200, 1002);\par
INSERT INTO customers VALUES(2004, 'Grass', 'Berlin', 300, 1002);\par
INSERT INTO customers VALUES(2006, 'Clemens', 'London', 100, 1001);\par
INSERT INTO customers VALUES(2008, 'Cisneros', 'San Jose', 300, 1007);\par
INSERT INTO customers VALUES(2007, 'Pereira', 'Rome', 100, 1004);\par
\par
INSERT INTO orders VALUES(3001,18.69,'1990-10-03', 2008, 1007);\par
INSERT INTO orders VALUES(3003,767.19,'1990-10-03', 2001, 1001);\par
INSERT INTO orders VALUES(3002,1900.10,'1990-10-03', 2007, 1004);\par
INSERT INTO orders VALUES(3005,5160.45,'1990-10-03', 2003, 1002);\par
INSERT INTO orders VALUES(3006,1098.16,'1990-10-03', 2008, 1007);\par
INSERT INTO orders VALUES(3009,1713.23,'1990-10-04',2002, 1003);\par
INSERT INTO orders VALUES(3007,75.75,'1990-10-04',2004, 1002);\par
INSERT INTO orders VALUES(3008,4723.00,'1990-10-04',2006, 1001);\par
INSERT INTO orders VALUES(3010,309.95,'1990-10-04',2004, 1002);\par
INSERT INTO orders VALUES(3011,9891.88,'1990-10-04',2006, 1001);\par
\par
SELECT s.sname, s.snum\par
FROM salespeople s\par
WHERE (\par
  SELECT COUNT(*)\par
  FROM customers\par
  WHERE snum = s.snum\par
) > 1;\par
}
 